/*

Xilinx SDx v2017.4 (64-bit) [Major: 2017, Minor: 4]
SW Build: 2086221 on Fri Dec 15 20:55:10 MST 2017


Process ID: 20126
License: Customer

Current time: 	Tue Aug 07 22:07:44 UTC 2018
Time zone: 	Coordinated Universal Time (UTC)

OS: CentOS Linux release 7.5.1804 (Core)
OS Version: 4.4.0-127-generic
OS Architecture: amd64
Available processors (cores): 32

Display: :50.0
Screen size: 1920x1056
Screen resolution (DPI): 96
Available screens: 1
Available disk space: 1,687 GB

Java version: 	1.8.0_112 64-bit
Java home: 	/home/ramon/Xilinx/SDK/2017.4/tps/lnx64/jre
JVM executable location: 	/home/ramon/Xilinx/SDK/2017.4/tps/lnx64/jre/bin/java

User name: 	ramon
User home directory: /home/ramon
User working directory: /home/ramon/hardcloud/samples
User country: 	US
User language: 	en
User locale: 	en_US

RDI_BASEROOT: /home/ramon/Xilinx/SDK
HDI_APPROOT: /home/ramon/Xilinx/SDK/2017.4
RDI_DATADIR: /home/ramon/Xilinx/SDK/2017.4/data
RDI_BINDIR: /home/ramon/Xilinx/SDK/2017.4/bin

SDx preferences directory: /home/ramon/.Xilinx/SDx/2017.4/
SDx workspace directory: /home/ramon/workspace
SDx workspace log file location: /home/ramon/workspace/.metadata/.log
Engine tmp dir: 	./.Xil/sdx-20126-cad1

Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.

*/

bot.comboBox().setText("");
bot.tree().getTreeItem("blinkled").getNode("src").expand();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").expand();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").expand();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").getNode("sdx_kernel_wizard_0.xo").select();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").getNode("sdx_kernel_wizard_0.xo").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.button("OK").click();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").getNode("src").getNode("sdx_rtl_kernel").getNode("sdx_kernel_wizard_0").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.menu("File").menu("New").menu("Project...").click();
bot.button("Cancel").click();
bot.menu("File").menu("New").menu("SDx Project...").click();
bot.button("Next >").click();
bot.textWithLabel("&Project name:").setText("loopback");
bot.button("Next >").click();
bot.button("Next >").click();
bot.button("Next >").click();
bot.button("Finish").click();
bot.tree().getTreeItem("loopback").select();
bot.menu("Xilinx").menu("RTL Kernel Wizard...").click();
bot.comboBox().setSelection("Emulation-HW");
bot.comboBox().setText("");
bot.tree().getTreeItem("blinkled").select();
bot.contextMenu("Close Project").click();
bot.tree().getTreeItem("loopback").getNode("src").expand();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").expand();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").expand();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").getNode("main.c").select();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.styledText().setText("// This is a generated file. Use and modify at your own risk.

/*******************************************************************************
Vendor: Xilinx
Associated Filename: main.c
#Purpose: This example shows a basic vector add +1 (constant) by manipulating
#         memory inplace.
*******************************************************************************/

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <assert.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <CL/opencl.h>
#include <CL/cl_ext.h>

////////////////////////////////////////////////////////////////////////////////

#define NUM_WORKGROUPS (1)
#define WORKGROUP_SIZE (256)
#define MAX_LENGTH 8192

#if defined(SDX_PLATFORM) && !defined(TARGET_DEVICE)
#define STR_VALUE(arg)      #arg
#define GET_STRING(name) STR_VALUE(name)
#define TARGET_DEVICE GET_STRING(SDX_PLATFORM)
#endif

////////////////////////////////////////////////////////////////////////////////

int load_file_to_memory(const char *filename, char **result)
{
    uint size = 0;
    FILE *f = fopen(filename, "rb");
    if (f == NULL) {
        *result = NULL;
        return -1; // -1 means file opening fail
    }
    fseek(f, 0, SEEK_END);
    size = ftell(f);
    fseek(f, 0, SEEK_SET);
    *result = (char *)malloc(size+1);
    if (size != fread(*result, sizeof(char), size, f)) {
        free(*result);
        return -2; // -2 means file reading fail
    }
    fclose(f);
    (*result)[size] = 0;
    return size;
}

int main(int argc, char** argv)
{

    int err;                            // error code returned from api calls
    int check_status = 0;
    const uint number_of_words = 4096; // 16KB of data


    cl_platform_id platform_id;         // platform id
    cl_device_id device_id;             // compute device id
    cl_context context;                 // compute context
    cl_command_queue commands;          // compute command queue
    cl_program program;                 // compute programs
    cl_kernel kernel;                   // compute kernel

    char cl_platform_vendor[1001];
    char target_device_name[1001] = TARGET_DEVICE;

    int h_axi00_ptr0_input[MAX_LENGTH];                    // host memory for input vector
    int h_axi00_ptr0_output[MAX_LENGTH];                   // host memory for output vector
    cl_mem d_axi00_ptr0;                         // device memory used for a vector

    if (argc != 2) {
        printf("Usage: %s xclbin\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Fill our data sets with pattern
    int i = 0;
    for(i = 0; i < MAX_LENGTH; i++) {

        h_axi00_ptr0_input[i]  = i;
        h_axi00_ptr0_output[i] = 0; 

    }

   // Get all platforms and then select Xilinx platform
    cl_platform_id platforms[16];       // platform id
    cl_uint platform_count;
    int platform_found = 0;
    err = clGetPlatformIDs(16, platforms, &platform_count);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to find an OpenCL platform!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    printf("INFO: Found %d platforms\n", platform_count);

    // Find Xilinx Plaftorm
    for (unsigned int iplat=0; iplat<platform_count; iplat++) {
        err = clGetPlatformInfo(platforms[iplat], CL_PLATFORM_VENDOR, 1000, (void *)cl_platform_vendor,NULL);
        if (err != CL_SUCCESS) {
            printf("Error: clGetPlatformInfo(CL_PLATFORM_VENDOR) failed!\n");
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        if (strcmp(cl_platform_vendor, "Xilinx") == 0) {
            printf("INFO: Selected platform %d from %s\n", iplat, cl_platform_vendor);
            platform_id = platforms[iplat];
            platform_found = 1;
        }
    }
    if (!platform_found) {
        printf("ERROR: Platform Xilinx not found. Exit.\n");
        return EXIT_FAILURE;
    }

   // Get Accelerator compute device
    cl_uint num_devices;
    unsigned int device_found = 0;
    cl_device_id devices[16];  // compute device id
    char cl_device_name[1001];
    err = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ACCELERATOR, 16, devices, &num_devices);
    printf("INFO: Found %d devices\n", num_devices);
    if (err != CL_SUCCESS) {
        printf("ERROR: Failed to create a device group!\n");
        printf("ERROR: Test failed\n");
        return -1;
    }

    //iterate all devices to select the target device.
    for (uint i=0; i<num_devices; i++) {
        err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, 1024, cl_device_name, 0);
        if (err != CL_SUCCESS) {
            printf("Error: Failed to get device name for device %d!\n", i);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        printf("CL_DEVICE_NAME %s\n", cl_device_name);
        if(strcmp(cl_device_name, target_device_name) == 0) {
            device_id = devices[i];
            device_found = 1;
            printf("Selected %s as the target device\n", cl_device_name);
       }
    }

    if (!device_found) {
        printf("Target device %s not found. Exit.\n", target_device_name);
        return EXIT_FAILURE;
    }

    // Create a compute context
    //
    context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);
    if (!context) {
        printf("Error: Failed to create a compute context!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create a command commands
    commands = clCreateCommandQueue(context, device_id, 0, &err);
    if (!commands) {
        printf("Error: Failed to create a command commands!\n");
        printf("Error: code %i\n",err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    int status;

    // Create Program Objects
    // Load binary from disk
    unsigned char *kernelbinary;
    char *xclbin = argv[1];

    //------------------------------------------------------------------------------
    // xclbin
    //------------------------------------------------------------------------------
    printf("INFO: loading xclbin %s\n", xclbin);
    int n_i0 = load_file_to_memory(xclbin, (char **) &kernelbinary);
    if (n_i0 < 0) {
        printf("failed to load kernel from xclbin: %s\n", xclbin);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    size_t n0 = n_i0;

    // Create the compute program from offline
    program = clCreateProgramWithBinary(context, 1, &device_id, &n0,
                                        (const unsigned char **) &kernelbinary, &status, &err);

    if ((!program) || (err!=CL_SUCCESS)) {
        printf("Error: Failed to create compute program from binary %d!\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Build the program executable
    //
    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err != CL_SUCCESS) {
        size_t len;
        char buffer[2048];

        printf("Error: Failed to build program executable!\n");
        clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
        printf("%s\n", buffer);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create the compute kernel in the program we wish to run
    //
     kernel = clCreateKernel(program, "loopback", &err);
    if (!kernel || err != CL_SUCCESS) {
        printf("Error: Failed to create compute kernel!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create structs to define memory bank mapping
    cl_mem_ext_ptr_t d_bank0_ext;
    cl_mem_ext_ptr_t d_bank1_ext;
    cl_mem_ext_ptr_t d_bank2_ext;
    cl_mem_ext_ptr_t d_bank3_ext;

    d_bank0_ext.flags = XCL_MEM_DDR_BANK0;
    d_bank0_ext.obj = NULL;
    d_bank0_ext.param = 0;

    d_bank1_ext.flags = XCL_MEM_DDR_BANK1;
    d_bank1_ext.obj = NULL;
    d_bank1_ext.param = 0;

    d_bank2_ext.flags = XCL_MEM_DDR_BANK2;
    d_bank2_ext.obj = NULL;
    d_bank2_ext.param = 0;

    d_bank3_ext.flags = XCL_MEM_DDR_BANK3;
    d_bank3_ext.obj = NULL;
    d_bank3_ext.param = 0;
    // Create the input and output arrays in device memory for our calculation



    d_axi00_ptr0 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);


    if (!(d_axi00_ptr0)) {
        printf("Error: Failed to allocate device memory!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    // Write our data set into the input array in device memory
    //


    err = clEnqueueWriteBuffer(commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_input, 0, NULL, NULL);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to write to source array h_axi00_ptr0_input!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }


    // Set the arguments to our compute kernel
    // int vector_length = MAX_LENGTH;
    err = 0;
    err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_axi00_ptr1); 
    err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_axi00_ptr0); // Not used in example RTL logic.

    if (err != CL_SUCCESS) {
        printf("Error: Failed to set kernel arguments! %d\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Execute the kernel over the entire range of our 1d input data set
    // using the maximum number of work group items for this device

    err = clEnqueueTask(commands, kernel, 0, NULL, NULL);
    if (err) {
            printf("Error: Failed to execute kernel! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }

    // Read back the results from the device to verify the output
    //
    cl_event readevent;
    clFinish(commands);

    err = 0;
    err |= clEnqueueReadBuffer( commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_output, 0, NULL, &readevent );


    if (err != CL_SUCCESS) {
            printf("Error: Failed to read output array! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
    clWaitForEvents(1, &readevent);
    // Check Results

    for (uint i = 0; i < number_of_words; i++) {
        if ((h_axi00_ptr0_input[i] + 1) != h_axi00_ptr0_output[i]) {
            printf("ERROR in loopback - array index %d (host addr 0x%03x) - input=%d (0x%x), output=%d (0x%x)\n", i, i*4, h_axi00_ptr0_input[i], h_axi00_ptr0_input[i], h_axi00_ptr0_output[i], h_axi00_ptr0_output[i]);
            check_status = 1;
        }
      //  printf("i=%d, input=%d, output=%d\n", i,  h_axi00_ptr0_input[i], h_axi00_ptr0_output[i]);
    }


    //--------------------------------------------------------------------------
    // Shutdown and cleanup
    //-------------------------------------------------------------------------- 
    clReleaseMemObject(d_axi00_ptr0);


    clReleaseProgram(program);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(commands);
    clReleaseContext(context);

    if (check_status) {
        printf("INFO: Test failed\n");
        return EXIT_FAILURE;
    } else {
        printf("INFO: Test completed successfully.\n");
        return EXIT_SUCCESS;
    }


} // end of main
");
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().setText("// This is a generated file. Use and modify at your own risk.

/*******************************************************************************
Vendor: Xilinx
Associated Filename: main.c
#Purpose: This example shows a basic vector add +1 (constant) by manipulating
#         memory inplace.
*******************************************************************************/

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <assert.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <CL/opencl.h>
#include <CL/cl_ext.h>

////////////////////////////////////////////////////////////////////////////////

#define NUM_WORKGROUPS (1)
#define WORKGROUP_SIZE (256)
#define MAX_LENGTH 8192

#if defined(SDX_PLATFORM) && !defined(TARGET_DEVICE)
#define STR_VALUE(arg)      #arg
#define GET_STRING(name) STR_VALUE(name)
#define TARGET_DEVICE GET_STRING(SDX_PLATFORM)
#endif

////////////////////////////////////////////////////////////////////////////////

int load_file_to_memory(const char *filename, char **result)
{
    uint size = 0;
    FILE *f = fopen(filename, "rb");
    if (f == NULL) {
        *result = NULL;
        return -1; // -1 means file opening fail
    }
    fseek(f, 0, SEEK_END);
    size = ftell(f);
    fseek(f, 0, SEEK_SET);
    *result = (char *)malloc(size+1);
    if (size != fread(*result, sizeof(char), size, f)) {
        free(*result);
        return -2; // -2 means file reading fail
    }
    fclose(f);
    (*result)[size] = 0;
    return size;
}

int main(int argc, char** argv)
{

    int err;                            // error code returned from api calls
    int check_status = 0;
    const uint number_of_words = 4096; // 16KB of data


    cl_platform_id platform_id;         // platform id
    cl_device_id device_id;             // compute device id
    cl_context context;                 // compute context
    cl_command_queue commands;          // compute command queue
    cl_program program;                 // compute programs
    cl_kernel kernel;                   // compute kernel

    char cl_platform_vendor[1001];
    char target_device_name[1001] = TARGET_DEVICE;

    int h_axi00_ptr0_input[MAX_LENGTH];                    // host memory for input vector
    int h_axi00_ptr0_output[MAX_LENGTH];                   // host memory for output vector
    cl_mem d_axi00_ptr0;                         // device memory used for a vector
    cl_mem d_axi00_ptr1;                         // device memory used for a vector
    
    if (argc != 2) {
        printf("Usage: %s xclbin\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Fill our data sets with pattern
    int i = 0;
    for(i = 0; i < MAX_LENGTH; i++) {

        h_axi00_ptr0_input[i]  = i;
        h_axi00_ptr0_output[i] = 0; 

    }

   // Get all platforms and then select Xilinx platform
    cl_platform_id platforms[16];       // platform id
    cl_uint platform_count;
    int platform_found = 0;
    err = clGetPlatformIDs(16, platforms, &platform_count);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to find an OpenCL platform!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    printf("INFO: Found %d platforms\n", platform_count);

    // Find Xilinx Plaftorm
    for (unsigned int iplat=0; iplat<platform_count; iplat++) {
        err = clGetPlatformInfo(platforms[iplat], CL_PLATFORM_VENDOR, 1000, (void *)cl_platform_vendor,NULL);
        if (err != CL_SUCCESS) {
            printf("Error: clGetPlatformInfo(CL_PLATFORM_VENDOR) failed!\n");
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        if (strcmp(cl_platform_vendor, "Xilinx") == 0) {
            printf("INFO: Selected platform %d from %s\n", iplat, cl_platform_vendor);
            platform_id = platforms[iplat];
            platform_found = 1;
        }
    }
    if (!platform_found) {
        printf("ERROR: Platform Xilinx not found. Exit.\n");
        return EXIT_FAILURE;
    }

   // Get Accelerator compute device
    cl_uint num_devices;
    unsigned int device_found = 0;
    cl_device_id devices[16];  // compute device id
    char cl_device_name[1001];
    err = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ACCELERATOR, 16, devices, &num_devices);
    printf("INFO: Found %d devices\n", num_devices);
    if (err != CL_SUCCESS) {
        printf("ERROR: Failed to create a device group!\n");
        printf("ERROR: Test failed\n");
        return -1;
    }

    //iterate all devices to select the target device.
    for (uint i=0; i<num_devices; i++) {
        err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, 1024, cl_device_name, 0);
        if (err != CL_SUCCESS) {
            printf("Error: Failed to get device name for device %d!\n", i);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        printf("CL_DEVICE_NAME %s\n", cl_device_name);
        if(strcmp(cl_device_name, target_device_name) == 0) {
            device_id = devices[i];
            device_found = 1;
            printf("Selected %s as the target device\n", cl_device_name);
       }
    }

    if (!device_found) {
        printf("Target device %s not found. Exit.\n", target_device_name);
        return EXIT_FAILURE;
    }

    // Create a compute context
    //
    context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);
    if (!context) {
        printf("Error: Failed to create a compute context!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create a command commands
    commands = clCreateCommandQueue(context, device_id, 0, &err);
    if (!commands) {
        printf("Error: Failed to create a command commands!\n");
        printf("Error: code %i\n",err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    int status;

    // Create Program Objects
    // Load binary from disk
    unsigned char *kernelbinary;
    char *xclbin = argv[1];

    //------------------------------------------------------------------------------
    // xclbin
    //------------------------------------------------------------------------------
    printf("INFO: loading xclbin %s\n", xclbin);
    int n_i0 = load_file_to_memory(xclbin, (char **) &kernelbinary);
    if (n_i0 < 0) {
        printf("failed to load kernel from xclbin: %s\n", xclbin);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    size_t n0 = n_i0;

    // Create the compute program from offline
    program = clCreateProgramWithBinary(context, 1, &device_id, &n0,
                                        (const unsigned char **) &kernelbinary, &status, &err);

    if ((!program) || (err!=CL_SUCCESS)) {
        printf("Error: Failed to create compute program from binary %d!\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Build the program executable
    //
    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err != CL_SUCCESS) {
        size_t len;
        char buffer[2048];

        printf("Error: Failed to build program executable!\n");
        clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
        printf("%s\n", buffer);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create the compute kernel in the program we wish to run
    //
     kernel = clCreateKernel(program, "loopback", &err);
    if (!kernel || err != CL_SUCCESS) {
        printf("Error: Failed to create compute kernel!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create structs to define memory bank mapping
    cl_mem_ext_ptr_t d_bank0_ext;
    cl_mem_ext_ptr_t d_bank1_ext;
    cl_mem_ext_ptr_t d_bank2_ext;
    cl_mem_ext_ptr_t d_bank3_ext;

    d_bank0_ext.flags = XCL_MEM_DDR_BANK0;
    d_bank0_ext.obj = NULL;
    d_bank0_ext.param = 0;

    d_bank1_ext.flags = XCL_MEM_DDR_BANK1;
    d_bank1_ext.obj = NULL;
    d_bank1_ext.param = 0;

    d_bank2_ext.flags = XCL_MEM_DDR_BANK2;
    d_bank2_ext.obj = NULL;
    d_bank2_ext.param = 0;

    d_bank3_ext.flags = XCL_MEM_DDR_BANK3;
    d_bank3_ext.obj = NULL;
    d_bank3_ext.param = 0;
    // Create the input and output arrays in device memory for our calculation



    d_axi00_ptr0 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);


    if (!(d_axi00_ptr0)) {
        printf("Error: Failed to allocate device memory!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    // Write our data set into the input array in device memory
    //


    err = clEnqueueWriteBuffer(commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_input, 0, NULL, NULL);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to write to source array h_axi00_ptr0_input!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }


    // Set the arguments to our compute kernel
    // int vector_length = MAX_LENGTH;
    err = 0;
    err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_axi00_ptr1); 
    err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_axi00_ptr0); // Not used in example RTL logic.

    if (err != CL_SUCCESS) {
        printf("Error: Failed to set kernel arguments! %d\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Execute the kernel over the entire range of our 1d input data set
    // using the maximum number of work group items for this device

    err = clEnqueueTask(commands, kernel, 0, NULL, NULL);
    if (err) {
            printf("Error: Failed to execute kernel! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }

    // Read back the results from the device to verify the output
    //
    cl_event readevent;
    clFinish(commands);

    err = 0;
    err |= clEnqueueReadBuffer( commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_output, 0, NULL, &readevent );


    if (err != CL_SUCCESS) {
            printf("Error: Failed to read output array! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
    clWaitForEvents(1, &readevent);
    // Check Results

    for (uint i = 0; i < number_of_words; i++) {
        if ((h_axi00_ptr0_input[i] + 1) != h_axi00_ptr0_output[i]) {
            printf("ERROR in loopback - array index %d (host addr 0x%03x) - input=%d (0x%x), output=%d (0x%x)\n", i, i*4, h_axi00_ptr0_input[i], h_axi00_ptr0_input[i], h_axi00_ptr0_output[i], h_axi00_ptr0_output[i]);
            check_status = 1;
        }
      //  printf("i=%d, input=%d, output=%d\n", i,  h_axi00_ptr0_input[i], h_axi00_ptr0_output[i]);
    }


    //--------------------------------------------------------------------------
    // Shutdown and cleanup
    //-------------------------------------------------------------------------- 
    clReleaseMemObject(d_axi00_ptr0);


    clReleaseProgram(program);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(commands);
    clReleaseContext(context);

    if (check_status) {
        printf("INFO: Test failed\n");
        return EXIT_FAILURE;
    } else {
        printf("INFO: Test completed successfully.\n");
        return EXIT_SUCCESS;
    }


} // end of main
");
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().setText("// This is a generated file. Use and modify at your own risk.

/*******************************************************************************
Vendor: Xilinx
Associated Filename: main.c
#Purpose: This example shows a basic vector add +1 (constant) by manipulating
#         memory inplace.
*******************************************************************************/

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <assert.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <CL/opencl.h>
#include <CL/cl_ext.h>

////////////////////////////////////////////////////////////////////////////////

#define NUM_WORKGROUPS (1)
#define WORKGROUP_SIZE (256)
#define MAX_LENGTH 8192

#if defined(SDX_PLATFORM) && !defined(TARGET_DEVICE)
#define STR_VALUE(arg)      #arg
#define GET_STRING(name) STR_VALUE(name)
#define TARGET_DEVICE GET_STRING(SDX_PLATFORM)
#endif

////////////////////////////////////////////////////////////////////////////////

int load_file_to_memory(const char *filename, char **result)
{
    uint size = 0;
    FILE *f = fopen(filename, "rb");
    if (f == NULL) {
        *result = NULL;
        return -1; // -1 means file opening fail
    }
    fseek(f, 0, SEEK_END);
    size = ftell(f);
    fseek(f, 0, SEEK_SET);
    *result = (char *)malloc(size+1);
    if (size != fread(*result, sizeof(char), size, f)) {
        free(*result);
        return -2; // -2 means file reading fail
    }
    fclose(f);
    (*result)[size] = 0;
    return size;
}

int main(int argc, char** argv)
{

    int err;                            // error code returned from api calls
    int check_status = 0;
    const uint number_of_words = 4096; // 16KB of data


    cl_platform_id platform_id;         // platform id
    cl_device_id device_id;             // compute device id
    cl_context context;                 // compute context
    cl_command_queue commands;          // compute command queue
    cl_program program;                 // compute programs
    cl_kernel kernel;                   // compute kernel

    char cl_platform_vendor[1001];
    char target_device_name[1001] = TARGET_DEVICE;

    int h_axi00_ptr0_input[MAX_LENGTH];                    // host memory for input vector
    int h_axi00_ptr0_output[MAX_LENGTH];                   // host memory for output vector
    cl_mem d_axi00_ptr0;                         // device memory used for a vector
    cl_mem d_axi00_ptr1;                         // device memory used for a vector

    if (argc != 2) {
        printf("Usage: %s xclbin\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Fill our data sets with pattern
    int i = 0;
    for(i = 0; i < MAX_LENGTH; i++) {

        h_axi00_ptr0_input[i]  = i;
        h_axi00_ptr0_output[i] = 0; 

    }

   // Get all platforms and then select Xilinx platform
    cl_platform_id platforms[16];       // platform id
    cl_uint platform_count;
    int platform_found = 0;
    err = clGetPlatformIDs(16, platforms, &platform_count);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to find an OpenCL platform!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    printf("INFO: Found %d platforms\n", platform_count);

    // Find Xilinx Plaftorm
    for (unsigned int iplat=0; iplat<platform_count; iplat++) {
        err = clGetPlatformInfo(platforms[iplat], CL_PLATFORM_VENDOR, 1000, (void *)cl_platform_vendor,NULL);
        if (err != CL_SUCCESS) {
            printf("Error: clGetPlatformInfo(CL_PLATFORM_VENDOR) failed!\n");
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        if (strcmp(cl_platform_vendor, "Xilinx") == 0) {
            printf("INFO: Selected platform %d from %s\n", iplat, cl_platform_vendor);
            platform_id = platforms[iplat];
            platform_found = 1;
        }
    }
    if (!platform_found) {
        printf("ERROR: Platform Xilinx not found. Exit.\n");
        return EXIT_FAILURE;
    }

   // Get Accelerator compute device
    cl_uint num_devices;
    unsigned int device_found = 0;
    cl_device_id devices[16];  // compute device id
    char cl_device_name[1001];
    err = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ACCELERATOR, 16, devices, &num_devices);
    printf("INFO: Found %d devices\n", num_devices);
    if (err != CL_SUCCESS) {
        printf("ERROR: Failed to create a device group!\n");
        printf("ERROR: Test failed\n");
        return -1;
    }

    //iterate all devices to select the target device.
    for (uint i=0; i<num_devices; i++) {
        err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, 1024, cl_device_name, 0);
        if (err != CL_SUCCESS) {
            printf("Error: Failed to get device name for device %d!\n", i);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        printf("CL_DEVICE_NAME %s\n", cl_device_name);
        if(strcmp(cl_device_name, target_device_name) == 0) {
            device_id = devices[i];
            device_found = 1;
            printf("Selected %s as the target device\n", cl_device_name);
       }
    }

    if (!device_found) {
        printf("Target device %s not found. Exit.\n", target_device_name);
        return EXIT_FAILURE;
    }

    // Create a compute context
    //
    context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);
    if (!context) {
        printf("Error: Failed to create a compute context!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create a command commands
    commands = clCreateCommandQueue(context, device_id, 0, &err);
    if (!commands) {
        printf("Error: Failed to create a command commands!\n");
        printf("Error: code %i\n",err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    int status;

    // Create Program Objects
    // Load binary from disk
    unsigned char *kernelbinary;
    char *xclbin = argv[1];

    //------------------------------------------------------------------------------
    // xclbin
    //------------------------------------------------------------------------------
    printf("INFO: loading xclbin %s\n", xclbin);
    int n_i0 = load_file_to_memory(xclbin, (char **) &kernelbinary);
    if (n_i0 < 0) {
        printf("failed to load kernel from xclbin: %s\n", xclbin);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    size_t n0 = n_i0;

    // Create the compute program from offline
    program = clCreateProgramWithBinary(context, 1, &device_id, &n0,
                                        (const unsigned char **) &kernelbinary, &status, &err);

    if ((!program) || (err!=CL_SUCCESS)) {
        printf("Error: Failed to create compute program from binary %d!\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Build the program executable
    //
    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err != CL_SUCCESS) {
        size_t len;
        char buffer[2048];

        printf("Error: Failed to build program executable!\n");
        clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
        printf("%s\n", buffer);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create the compute kernel in the program we wish to run
    //
     kernel = clCreateKernel(program, "loopback", &err);
    if (!kernel || err != CL_SUCCESS) {
        printf("Error: Failed to create compute kernel!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create structs to define memory bank mapping
    cl_mem_ext_ptr_t d_bank0_ext;
    cl_mem_ext_ptr_t d_bank1_ext;
    cl_mem_ext_ptr_t d_bank2_ext;
    cl_mem_ext_ptr_t d_bank3_ext;

    d_bank0_ext.flags = XCL_MEM_DDR_BANK0;
    d_bank0_ext.obj = NULL;
    d_bank0_ext.param = 0;

    d_bank1_ext.flags = XCL_MEM_DDR_BANK1;
    d_bank1_ext.obj = NULL;
    d_bank1_ext.param = 0;

    d_bank2_ext.flags = XCL_MEM_DDR_BANK2;
    d_bank2_ext.obj = NULL;
    d_bank2_ext.param = 0;

    d_bank3_ext.flags = XCL_MEM_DDR_BANK3;
    d_bank3_ext.obj = NULL;
    d_bank3_ext.param = 0;
    // Create the input and output arrays in device memory for our calculation



    d_axi00_ptr0 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);

    d_axi00_ptr1 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);

    
    
    if (!(d_axi00_ptr0)) {
        printf("Error: Failed to allocate device memory!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    // Write our data set into the input array in device memory
    //


    err = clEnqueueWriteBuffer(commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_input, 0, NULL, NULL);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to write to source array h_axi00_ptr0_input!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }


    // Set the arguments to our compute kernel
    // int vector_length = MAX_LENGTH;
    err = 0;
    err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_axi00_ptr1);
    err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_axi00_ptr0); // Not used in example RTL logic.

    if (err != CL_SUCCESS) {
        printf("Error: Failed to set kernel arguments! %d\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Execute the kernel over the entire range of our 1d input data set
    // using the maximum number of work group items for this device

    err = clEnqueueTask(commands, kernel, 0, NULL, NULL);
    if (err) {
            printf("Error: Failed to execute kernel! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }

    // Read back the results from the device to verify the output
    //
    cl_event readevent;
    clFinish(commands);

    err = 0;
    err |= clEnqueueReadBuffer( commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_output, 0, NULL, &readevent );


    if (err != CL_SUCCESS) {
            printf("Error: Failed to read output array! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
    clWaitForEvents(1, &readevent);
    // Check Results

    for (uint i = 0; i < number_of_words; i++) {
        if ((h_axi00_ptr0_input[i] + 1) != h_axi00_ptr0_output[i]) {
            printf("ERROR in loopback - array index %d (host addr 0x%03x) - input=%d (0x%x), output=%d (0x%x)\n", i, i*4, h_axi00_ptr0_input[i], h_axi00_ptr0_input[i], h_axi00_ptr0_output[i], h_axi00_ptr0_output[i]);
            check_status = 1;
        }
      //  printf("i=%d, input=%d, output=%d\n", i,  h_axi00_ptr0_input[i], h_axi00_ptr0_output[i]);
    }


    //--------------------------------------------------------------------------
    // Shutdown and cleanup
    //-------------------------------------------------------------------------- 
    clReleaseMemObject(d_axi00_ptr0);


    clReleaseProgram(program);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(commands);
    clReleaseContext(context);

    if (check_status) {
        printf("INFO: Test failed\n");
        return EXIT_FAILURE;
    } else {
        printf("INFO: Test completed successfully.\n");
        return EXIT_SUCCESS;
    }


} // end of main
");
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().setText("// This is a generated file. Use and modify at your own risk.

/*******************************************************************************
Vendor: Xilinx
Associated Filename: main.c
#Purpose: This example shows a basic vector add +1 (constant) by manipulating
#         memory inplace.
*******************************************************************************/

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <assert.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <CL/opencl.h>
#include <CL/cl_ext.h>

////////////////////////////////////////////////////////////////////////////////

#define NUM_WORKGROUPS (1)
#define WORKGROUP_SIZE (256)
#define MAX_LENGTH 8192

#if defined(SDX_PLATFORM) && !defined(TARGET_DEVICE)
#define STR_VALUE(arg)      #arg
#define GET_STRING(name) STR_VALUE(name)
#define TARGET_DEVICE GET_STRING(SDX_PLATFORM)
#endif

////////////////////////////////////////////////////////////////////////////////

int load_file_to_memory(const char *filename, char **result)
{
    uint size = 0;
    FILE *f = fopen(filename, "rb");
    if (f == NULL) {
        *result = NULL;
        return -1; // -1 means file opening fail
    }
    fseek(f, 0, SEEK_END);
    size = ftell(f);
    fseek(f, 0, SEEK_SET);
    *result = (char *)malloc(size+1);
    if (size != fread(*result, sizeof(char), size, f)) {
        free(*result);
        return -2; // -2 means file reading fail
    }
    fclose(f);
    (*result)[size] = 0;
    return size;
}

int main(int argc, char** argv)
{

    int err;                            // error code returned from api calls
    int check_status = 0;
    const uint number_of_words = 4096; // 16KB of data


    cl_platform_id platform_id;         // platform id
    cl_device_id device_id;             // compute device id
    cl_context context;                 // compute context
    cl_command_queue commands;          // compute command queue
    cl_program program;                 // compute programs
    cl_kernel kernel;                   // compute kernel

    char cl_platform_vendor[1001];
    char target_device_name[1001] = TARGET_DEVICE;

    int h_axi00_ptr0_input[MAX_LENGTH];                    // host memory for input vector
    int h_axi00_ptr0_output[MAX_LENGTH];                   // host memory for output vector
    cl_mem d_axi00_ptr0;                         // device memory used for a vector
    cl_mem d_axi00_ptr1;                         // device memory used for a vector

    if (argc != 2) {
        printf("Usage: %s xclbin\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Fill our data sets with pattern
    int i = 0;
    for(i = 0; i < MAX_LENGTH; i++) {

        h_axi00_ptr0_input[i]  = i;
        h_axi00_ptr0_output[i] = 0; 

    }

   // Get all platforms and then select Xilinx platform
    cl_platform_id platforms[16];       // platform id
    cl_uint platform_count;
    int platform_found = 0;
    err = clGetPlatformIDs(16, platforms, &platform_count);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to find an OpenCL platform!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    printf("INFO: Found %d platforms\n", platform_count);

    // Find Xilinx Plaftorm
    for (unsigned int iplat=0; iplat<platform_count; iplat++) {
        err = clGetPlatformInfo(platforms[iplat], CL_PLATFORM_VENDOR, 1000, (void *)cl_platform_vendor,NULL);
        if (err != CL_SUCCESS) {
            printf("Error: clGetPlatformInfo(CL_PLATFORM_VENDOR) failed!\n");
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        if (strcmp(cl_platform_vendor, "Xilinx") == 0) {
            printf("INFO: Selected platform %d from %s\n", iplat, cl_platform_vendor);
            platform_id = platforms[iplat];
            platform_found = 1;
        }
    }
    if (!platform_found) {
        printf("ERROR: Platform Xilinx not found. Exit.\n");
        return EXIT_FAILURE;
    }

   // Get Accelerator compute device
    cl_uint num_devices;
    unsigned int device_found = 0;
    cl_device_id devices[16];  // compute device id
    char cl_device_name[1001];
    err = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ACCELERATOR, 16, devices, &num_devices);
    printf("INFO: Found %d devices\n", num_devices);
    if (err != CL_SUCCESS) {
        printf("ERROR: Failed to create a device group!\n");
        printf("ERROR: Test failed\n");
        return -1;
    }

    //iterate all devices to select the target device.
    for (uint i=0; i<num_devices; i++) {
        err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, 1024, cl_device_name, 0);
        if (err != CL_SUCCESS) {
            printf("Error: Failed to get device name for device %d!\n", i);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        printf("CL_DEVICE_NAME %s\n", cl_device_name);
        if(strcmp(cl_device_name, target_device_name) == 0) {
            device_id = devices[i];
            device_found = 1;
            printf("Selected %s as the target device\n", cl_device_name);
       }
    }

    if (!device_found) {
        printf("Target device %s not found. Exit.\n", target_device_name);
        return EXIT_FAILURE;
    }

    // Create a compute context
    //
    context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);
    if (!context) {
        printf("Error: Failed to create a compute context!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create a command commands
    commands = clCreateCommandQueue(context, device_id, 0, &err);
    if (!commands) {
        printf("Error: Failed to create a command commands!\n");
        printf("Error: code %i\n",err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    int status;

    // Create Program Objects
    // Load binary from disk
    unsigned char *kernelbinary;
    char *xclbin = argv[1];

    //------------------------------------------------------------------------------
    // xclbin
    //------------------------------------------------------------------------------
    printf("INFO: loading xclbin %s\n", xclbin);
    int n_i0 = load_file_to_memory(xclbin, (char **) &kernelbinary);
    if (n_i0 < 0) {
        printf("failed to load kernel from xclbin: %s\n", xclbin);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    size_t n0 = n_i0;

    // Create the compute program from offline
    program = clCreateProgramWithBinary(context, 1, &device_id, &n0,
                                        (const unsigned char **) &kernelbinary, &status, &err);

    if ((!program) || (err!=CL_SUCCESS)) {
        printf("Error: Failed to create compute program from binary %d!\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Build the program executable
    //
    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err != CL_SUCCESS) {
        size_t len;
        char buffer[2048];

        printf("Error: Failed to build program executable!\n");
        clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
        printf("%s\n", buffer);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create the compute kernel in the program we wish to run
    //
     kernel = clCreateKernel(program, "loopback", &err);
    if (!kernel || err != CL_SUCCESS) {
        printf("Error: Failed to create compute kernel!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create structs to define memory bank mapping
    cl_mem_ext_ptr_t d_bank0_ext;
    cl_mem_ext_ptr_t d_bank1_ext;
    cl_mem_ext_ptr_t d_bank2_ext;
    cl_mem_ext_ptr_t d_bank3_ext;

    d_bank0_ext.flags = XCL_MEM_DDR_BANK0;
    d_bank0_ext.obj = NULL;
    d_bank0_ext.param = 0;

    d_bank1_ext.flags = XCL_MEM_DDR_BANK1;
    d_bank1_ext.obj = NULL;
    d_bank1_ext.param = 0;

    d_bank2_ext.flags = XCL_MEM_DDR_BANK2;
    d_bank2_ext.obj = NULL;
    d_bank2_ext.param = 0;

    d_bank3_ext.flags = XCL_MEM_DDR_BANK3;
    d_bank3_ext.obj = NULL;
    d_bank3_ext.param = 0;
    // Create the input and output arrays in device memory for our calculation



    d_axi00_ptr0 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);

    d_axi00_ptr1 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);



    if (!(d_axi00_ptr0)) {
        printf("Error: Failed to allocate device memory 0!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    if (!(d_axi00_ptr1)) {
        printf("Error: Failed to allocate device memory 1!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    // Write our data set into the input array in device memory
    //


    err = clEnqueueWriteBuffer(commands, d_axi00_ptr1, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_input, 0, NULL, NULL);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to write to source array h_axi00_ptr0_input!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }


    // Set the arguments to our compute kernel
    // int vector_length = MAX_LENGTH;
    err = 0;
    err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_axi00_ptr0);
    err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_axi00_ptr1); // Not used in example RTL logic.

    if (err != CL_SUCCESS) {
        printf("Error: Failed to set kernel arguments! %d\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Execute the kernel over the entire range of our 1d input data set
    // using the maximum number of work group items for this device

    err = clEnqueueTask(commands, kernel, 0, NULL, NULL);
    if (err) {
            printf("Error: Failed to execute kernel! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }

    // Read back the results from the device to verify the output
    //
    cl_event readevent;
    clFinish(commands);

    err = 0;
    err |= clEnqueueReadBuffer( commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_output, 0, NULL, &readevent );


    if (err != CL_SUCCESS) {
            printf("Error: Failed to read output array! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
    clWaitForEvents(1, &readevent);
    // Check Results

    for (uint i = 0; i < number_of_words; i++) {
        if ((h_axi00_ptr0_input[i] + 1) != h_axi00_ptr0_output[i]) {
            printf("ERROR in loopback - array index %d (host addr 0x%03x) - input=%d (0x%x), output=%d (0x%x)\n", i, i*4, h_axi00_ptr0_input[i], h_axi00_ptr0_input[i], h_axi00_ptr0_output[i], h_axi00_ptr0_output[i]);
            check_status = 1;
        }
      //  printf("i=%d, input=%d, output=%d\n", i,  h_axi00_ptr0_input[i], h_axi00_ptr0_output[i]);
    }


    //--------------------------------------------------------------------------
    // Shutdown and cleanup
    //-------------------------------------------------------------------------- 
    clReleaseMemObject(d_axi00_ptr0);


    clReleaseProgram(program);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(commands);
    clReleaseContext(context);

    if (check_status) {
        printf("INFO: Test failed\n");
        return EXIT_FAILURE;
    } else {
        printf("INFO: Test completed successfully.\n");
        return EXIT_SUCCESS;
    }


} // end of main
");
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().pressShortcut(SWT.SHIFT);
bot.styledText().setText("// This is a generated file. Use and modify at your own risk.

/*******************************************************************************
Vendor: Xilinx
Associated Filename: main.c
#Purpose: This example shows a basic vector add +1 (constant) by manipulating
#         memory inplace.
*******************************************************************************/

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <assert.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <CL/opencl.h>
#include <CL/cl_ext.h>

////////////////////////////////////////////////////////////////////////////////

#define NUM_WORKGROUPS (1)
#define WORKGROUP_SIZE (256)
#define MAX_LENGTH 8192

#if defined(SDX_PLATFORM) && !defined(TARGET_DEVICE)
#define STR_VALUE(arg)      #arg
#define GET_STRING(name) STR_VALUE(name)
#define TARGET_DEVICE GET_STRING(SDX_PLATFORM)
#endif

////////////////////////////////////////////////////////////////////////////////

int load_file_to_memory(const char *filename, char **result)
{
    uint size = 0;
    FILE *f = fopen(filename, "rb");
    if (f == NULL) {
        *result = NULL;
        return -1; // -1 means file opening fail
    }
    fseek(f, 0, SEEK_END);
    size = ftell(f);
    fseek(f, 0, SEEK_SET);
    *result = (char *)malloc(size+1);
    if (size != fread(*result, sizeof(char), size, f)) {
        free(*result);
        return -2; // -2 means file reading fail
    }
    fclose(f);
    (*result)[size] = 0;
    return size;
}

int main(int argc, char** argv)
{

    int err;                            // error code returned from api calls
    int check_status = 0;
    const uint number_of_words = 4096; // 16KB of data


    cl_platform_id platform_id;         // platform id
    cl_device_id device_id;             // compute device id
    cl_context context;                 // compute context
    cl_command_queue commands;          // compute command queue
    cl_program program;                 // compute programs
    cl_kernel kernel;                   // compute kernel

    char cl_platform_vendor[1001];
    char target_device_name[1001] = TARGET_DEVICE;

    int h_axi00_ptr0_input[MAX_LENGTH];                    // host memory for input vector
    int h_axi00_ptr0_output[MAX_LENGTH];                   // host memory for output vector
    cl_mem d_axi00_ptr0;                         // device memory used for a vector
    cl_mem d_axi00_ptr1;                         // device memory used for a vector

    if (argc != 2) {
        printf("Usage: %s xclbin\n", argv[0]);
        return EXIT_FAILURE;
    }

    // Fill our data sets with pattern
    int i = 0;
    for(i = 0; i < MAX_LENGTH; i++) {

        h_axi00_ptr0_input[i]  = i;
        h_axi00_ptr0_output[i] = 0; 

    }

   // Get all platforms and then select Xilinx platform
    cl_platform_id platforms[16];       // platform id
    cl_uint platform_count;
    int platform_found = 0;
    err = clGetPlatformIDs(16, platforms, &platform_count);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to find an OpenCL platform!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    printf("INFO: Found %d platforms\n", platform_count);

    // Find Xilinx Plaftorm
    for (unsigned int iplat=0; iplat<platform_count; iplat++) {
        err = clGetPlatformInfo(platforms[iplat], CL_PLATFORM_VENDOR, 1000, (void *)cl_platform_vendor,NULL);
        if (err != CL_SUCCESS) {
            printf("Error: clGetPlatformInfo(CL_PLATFORM_VENDOR) failed!\n");
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        if (strcmp(cl_platform_vendor, "Xilinx") == 0) {
            printf("INFO: Selected platform %d from %s\n", iplat, cl_platform_vendor);
            platform_id = platforms[iplat];
            platform_found = 1;
        }
    }
    if (!platform_found) {
        printf("ERROR: Platform Xilinx not found. Exit.\n");
        return EXIT_FAILURE;
    }

   // Get Accelerator compute device
    cl_uint num_devices;
    unsigned int device_found = 0;
    cl_device_id devices[16];  // compute device id
    char cl_device_name[1001];
    err = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ACCELERATOR, 16, devices, &num_devices);
    printf("INFO: Found %d devices\n", num_devices);
    if (err != CL_SUCCESS) {
        printf("ERROR: Failed to create a device group!\n");
        printf("ERROR: Test failed\n");
        return -1;
    }

    //iterate all devices to select the target device.
    for (uint i=0; i<num_devices; i++) {
        err = clGetDeviceInfo(devices[i], CL_DEVICE_NAME, 1024, cl_device_name, 0);
        if (err != CL_SUCCESS) {
            printf("Error: Failed to get device name for device %d!\n", i);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
        printf("CL_DEVICE_NAME %s\n", cl_device_name);
        if(strcmp(cl_device_name, target_device_name) == 0) {
            device_id = devices[i];
            device_found = 1;
            printf("Selected %s as the target device\n", cl_device_name);
       }
    }

    if (!device_found) {
        printf("Target device %s not found. Exit.\n", target_device_name);
        return EXIT_FAILURE;
    }

    // Create a compute context
    //
    context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);
    if (!context) {
        printf("Error: Failed to create a compute context!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create a command commands
    commands = clCreateCommandQueue(context, device_id, 0, &err);
    if (!commands) {
        printf("Error: Failed to create a command commands!\n");
        printf("Error: code %i\n",err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    int status;

    // Create Program Objects
    // Load binary from disk
    unsigned char *kernelbinary;
    char *xclbin = argv[1];

    //------------------------------------------------------------------------------
    // xclbin
    //------------------------------------------------------------------------------
    printf("INFO: loading xclbin %s\n", xclbin);
    int n_i0 = load_file_to_memory(xclbin, (char **) &kernelbinary);
    if (n_i0 < 0) {
        printf("failed to load kernel from xclbin: %s\n", xclbin);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    size_t n0 = n_i0;

    // Create the compute program from offline
    program = clCreateProgramWithBinary(context, 1, &device_id, &n0,
                                        (const unsigned char **) &kernelbinary, &status, &err);

    if ((!program) || (err!=CL_SUCCESS)) {
        printf("Error: Failed to create compute program from binary %d!\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Build the program executable
    //
    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    if (err != CL_SUCCESS) {
        size_t len;
        char buffer[2048];

        printf("Error: Failed to build program executable!\n");
        clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
        printf("%s\n", buffer);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create the compute kernel in the program we wish to run
    //
     kernel = clCreateKernel(program, "loopback", &err);
    if (!kernel || err != CL_SUCCESS) {
        printf("Error: Failed to create compute kernel!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Create structs to define memory bank mapping
    cl_mem_ext_ptr_t d_bank0_ext;
    cl_mem_ext_ptr_t d_bank1_ext;
    cl_mem_ext_ptr_t d_bank2_ext;
    cl_mem_ext_ptr_t d_bank3_ext;

    d_bank0_ext.flags = XCL_MEM_DDR_BANK0;
    d_bank0_ext.obj = NULL;
    d_bank0_ext.param = 0;

    d_bank1_ext.flags = XCL_MEM_DDR_BANK1;
    d_bank1_ext.obj = NULL;
    d_bank1_ext.param = 0;

    d_bank2_ext.flags = XCL_MEM_DDR_BANK2;
    d_bank2_ext.obj = NULL;
    d_bank2_ext.param = 0;

    d_bank3_ext.flags = XCL_MEM_DDR_BANK3;
    d_bank3_ext.obj = NULL;
    d_bank3_ext.param = 0;
    // Create the input and output arrays in device memory for our calculation



    d_axi00_ptr0 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);

    d_axi00_ptr1 = clCreateBuffer(context,  CL_MEM_READ_WRITE | CL_MEM_EXT_PTR_XILINX,  sizeof(int) * number_of_words, &d_bank0_ext, NULL);



    if (!(d_axi00_ptr0)) {
        printf("Error: Failed to allocate device memory 0!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    if (!(d_axi00_ptr1)) {
        printf("Error: Failed to allocate device memory 1!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }
    // Write our data set into the input array in device memory
    //


    err = clEnqueueWriteBuffer(commands, d_axi00_ptr1, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_input, 0, NULL, NULL);
    if (err != CL_SUCCESS) {
        printf("Error: Failed to write to source array h_axi00_ptr0_input!\n");
        printf("Test failed\n");
        return EXIT_FAILURE;
    }


    // Set the arguments to our compute kernel
    // int vector_length = MAX_LENGTH;
    err = 0;
    err |= clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_axi00_ptr0);
    err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_axi00_ptr1); // Not used in example RTL logic.

    if (err != CL_SUCCESS) {
        printf("Error: Failed to set kernel arguments! %d\n", err);
        printf("Test failed\n");
        return EXIT_FAILURE;
    }

    // Execute the kernel over the entire range of our 1d input data set
    // using the maximum number of work group items for this device

    err = clEnqueueTask(commands, kernel, 0, NULL, NULL);
    if (err) {
            printf("Error: Failed to execute kernel! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }

    // Read back the results from the device to verify the output
    //
    cl_event readevent;
    clFinish(commands);

    err = 0;
    err |= clEnqueueReadBuffer( commands, d_axi00_ptr0, CL_TRUE, 0, sizeof(int) * number_of_words, h_axi00_ptr0_output, 0, NULL, &readevent );


    if (err != CL_SUCCESS) {
            printf("Error: Failed to read output array! %d\n", err);
            printf("Test failed\n");
            return EXIT_FAILURE;
        }
    clWaitForEvents(1, &readevent);
    // Check Results

    for (uint i = 0; i < number_of_words; i++) {
        if ((h_axi00_ptr0_input[i] + 1) != h_axi00_ptr0_output[i]) {
            printf("ERROR in loopback - array index %d (host addr 0x%03x) - input=%d (0x%x), output=%d (0x%x)\n", i, i*4, h_axi00_ptr0_input[i], h_axi00_ptr0_input[i], h_axi00_ptr0_output[i], h_axi00_ptr0_output[i]);
            check_status = 1;
        }
      //  printf("i=%d, input=%d, output=%d\n", i,  h_axi00_ptr0_input[i], h_axi00_ptr0_output[i]);
    }


    //--------------------------------------------------------------------------
    // Shutdown and cleanup
    //-------------------------------------------------------------------------- 
    clReleaseMemObject(d_axi00_ptr0);
    clReleaseMemObject(d_axi00_ptr1);


    clReleaseProgram(program);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(commands);
    clReleaseContext(context);

    if (check_status) {
        printf("INFO: Test failed\n");
        return EXIT_FAILURE;
    } else {
        printf("INFO: Test completed successfully.\n");
        return EXIT_SUCCESS;
    }


} // end of main
");
bot.toolbarDropDownButtonWithTooltip("Build 'Emulation-HW' for project 'loopback'").click();
bot.button("Cancel").click();
bot.toolbarButtonWithTooltip("Add Binary Container").click();
bot.toolbarButtonWithTooltip("Add Hardware Function...").click();
bot.button("OK").click();
bot.menu("Run").menu("Run Configurations...").click();
bot.checkBox("Automatically add binary container(s) to arguments").click();
bot.checkBox("Automatically add binary container(s) to arguments").click();
bot.button("Apply").click();
bot.button("Close").click();
bot.toolbarDropDownButtonWithTooltip("Build 'Emulation-HW' for project 'loopback'").click();
bot.toolbarDropDownButtonWithTooltip("Run loopback-Default").click();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").getNode("main.c").select();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.comboBox().setSelection("System");
bot.comboBox().setText("");
bot.toolbarDropDownButtonWithTooltip("Build 'System' for project 'loopback'").click();
bot.tree().getTreeItem("loopback").getNode("Emulation-HW").expand();
bot.tree().getTreeItem("loopback").getNode("System").expand();
bot.tree().getTreeItem("loopback").getNode("System").getNode("iprepo").select();
bot.tree().getTreeItem("loopback").getNode("System").getNode("src").expand();
bot.tree().getTreeItem("loopback").getNode("System").getNode("src").expand();
bot.tree().getTreeItem("loopback").getNode("System").getNode("src").getNode("sdx_rtl_kernel").expand();
bot.tree().getTreeItem("loopback").getNode("System").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").expand();
bot.tree().getTreeItem("loopback").getNode("src").expand();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").expand();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").expand();
bot.styledText(1).pressShortcut(SWT.CTRL);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.contextMenu("Copy").click();
bot.styledText(1).pressShortcut(SWT.CTRL);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.styledText(1).pressShortcut(SWT.SHIFT);
bot.styledText(1).pressShortcut(SWT.CTRL);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.contextMenu("Copy").click();
bot.contextMenu("Copy").click();
bot.contextMenu("Copy").click();
bot.contextMenu("Copy").click();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").getNode("main.c").select();
bot.tree().getTreeItem("loopback").getNode("src").getNode("sdx_rtl_kernel").getNode("loopback").getNode("main.c").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.comboBox().setText("cl_mem_ext_ptr_t");
bot.button("Find").click();
bot.styledText(1).pressShortcut(SWT.CTRL);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.contextMenu("Copy").click();
bot.menu("Run").menu("Run Configurations...").click();
bot.table().getTableItem("LD_LIBRARY_PATH").select();
bot.table().getTableItem("LD_LIBRARY_PATH").select();
bot.table().getTableItem("LD_LIBRARY_PATH").doubleClick();
bot.text().pressShortcut(SWT.CTRL, '');
bot.text().pressShortcut(SWT.CTRL, '');
bot.table().getTableItem("LD_LIBRARY_PATH").select();
bot.table().getTableItem("LD_LIBRARY_PATH").select();
bot.table().getTableItem("LD_LIBRARY_PATH").doubleClick();
bot.button("Cancel").click();
bot.table().getTableItem("LD_LIBRARY_PATH").select();
bot.table().getTableItem("LD_LIBRARY_PATH").select();
bot.table().getTableItem("LD_LIBRARY_PATH").doubleClick();
bot.button("Cancel").click();
bot.comboBox().setText("");
bot.styledText().pressShortcut();
bot.button("Find").click();
bot.button("Close").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.styledText(1).pressShortcut(SWT.CTRL);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.contextMenu("Copy").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.tree().getTreeItem("loopback").getNode("System").getNode("makefile").select();
bot.tree().getTreeItem("loopback").getNode("System").getNode("makefile").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.comboBox().setText("Creating Vivado project and starting FPGA synthesis");
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Find").click();
bot.button("Close").click();
bot.tree().getTreeItem("loopback").getNode("System").getNode("binary_container_1.mdb").select();
bot.menu("File").menu("New").menu("SDx Project...").click();
bot.button("Next >").click();
bot.textWithLabel("&Project name:").setText("sobel");
bot.tree().getTreeItem("zed").select();
bot.comboBox().setSelection("linux");
bot.button("< Back").click();
bot.tree().getTreeItem("xilinx_aws-vu9p-f1-04261818_dynamic_5_0 [custom]").select();
bot.button("Next >").click();
bot.button("Next >").click();
bot.button("Finish").click();
bot.tree().getTreeItem("loopback").select();
bot.comboBox().setSelection("Emulation-HW");
bot.comboBox().setText("");
bot.tree().getTreeItem("loopback").select();
bot.tree().getTreeItem("loopback").select();
bot.tree().getTreeItem("loopback").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.tree().getTreeItem("loopback").expand();
bot.tree().getTreeItem("loopback").getNode("project.sdx").select();
bot.tree().getTreeItem("loopback").getNode("project.sdx").select();
bot.tree().getTreeItem("blinkled").doubleClick();
bot.tree().getTreeItem("loopback").select();
bot.comboBox().setSelection("Emulation-HW");
bot.comboBox().setText("");
bot.tree().getTreeItem("loopback").select();
bot.toolbarDropDownButtonWithTooltip("Build 'Emulation-HW' for project 'loopback'").menuItem("Clean Project").click();
bot.contextMenu("Build Project").click();
bot.styledText(1).pressShortcut(SWT.SHIFT);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.contextMenu("Copy").click();
bot.styledText(1).pressShortcut(SWT.SHIFT);
bot.styledText(1).pressShortcut(SWT.SHIFT);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.styledText(1).pressShortcut(SWT.CTRL);
bot.styledText(1).pressShortcut(SWT.CTRL | SWT.SHIFT, '');
bot.contextMenu("Copy").click();
bot.contextMenu("Copy").click();
bot.contextMenu("Copy").click();
bot.tree().getTreeItem("sobel").expand();
bot.button("").click();
bot.tree().getTreeItem("loopback").select();
bot.contextMenu("Close Project").click();
bot.tree().getTreeItem("sobel").select();
bot.menu("Xilinx").menu("RTL Kernel Wizard...").click();
bot.contextMenu("Delete").click();
bot.checkBox("Delete project contents on disk (cannot be undone)").click();
bot.checkBox("Delete project contents on disk (cannot be undone)").click();
bot.button("OK").click();
bot.menu("File").menu("New").menu("SDx Project...").click();
bot.button("Next >").click();
bot.textWithLabel("&Project name:").setText("sobel");
bot.menu("Xilinx").menu("RTL Kernel Wizard...").click();
bot.tree().getTreeItem("sobel").select();
